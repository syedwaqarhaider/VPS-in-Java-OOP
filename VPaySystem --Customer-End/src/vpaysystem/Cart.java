/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vpaysystem;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author SWHB
 */
public class Cart extends javax.swing.JPanel {

    /**
     * Creates new form ShowShops
     */
    
    JLabel lblCartNo, lblBalance;
    String IP;
    public Cart(String myID, JLabel lblCartNo, JLabel lblBalance, String IP) {
        initComponents();
        this.myID=myID;
        this.IP=IP;
        this.lblCartNo=lblCartNo;
        int no=checkCart();
        lblCartNo.setText(Integer.toString(no));
        this.lblBalance=lblBalance;
        Connection con;
        Statement st;
        ResultSet rs;
         try
            {
                 Class.forName("oracle.jdbc.driver.OracleDriver");
            con=DriverManager.getConnection("jdbc:oracle:thin:@"+IP+":1521:xe","system","bukhari");
            
            String sq2="Select Count(Item_ID) as \"Number\" from CartView where CMS_ID='"+myID+"'";
               
             st=con.createStatement();
            rs=st.executeQuery(sq2);
            rs.next();
            noOfItems=rs.getInt("Number");
            
            String sql="Select * from CartView Where CMS_ID='"+myID+"'";
             st=con.createStatement();
            rs=st.executeQuery(sql);
             AddItems(rs); 
            
            con.close();
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartList = new javax.swing.JList<>();
        lblSearch = new javax.swing.JLabel();
        btnCheck = new javax.swing.JButton();

        setBackground(new java.awt.Color(52, 52, 60));
        setLayout(new java.awt.GridBagLayout());

        txtSearch.setBackground(new java.awt.Color(52, 52, 60));
        txtSearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtSearch.setForeground(new java.awt.Color(255, 255, 255));
        txtSearch.setBorder(null);
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 279;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 230, 0, 0);
        add(txtSearch, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 278;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 230, 0, 0);
        add(jSeparator1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("View Cart Detail");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 250, 0, 0);
        add(jLabel1, gridBagConstraints);

        cartList.setBackground(new java.awt.Color(52, 52, 60));
        cartList.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        cartList.setForeground(new java.awt.Color(255, 255, 255));
        cartList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartListMouseClicked(evt);
            }
        });
        cartList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cartListKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(cartList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 597;
        gridBagConstraints.ipady = 307;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(40, 80, 0, 77);
        add(jScrollPane2, gridBagConstraints);

        lblSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSearch.setForeground(new java.awt.Color(153, 153, 153));
        lblSearch.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(43, 230, 0, 0);
        add(lblSearch, gridBagConstraints);

        btnCheck.setBackground(new java.awt.Color(70, 80, 95));
        btnCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnCheck.setForeground(new java.awt.Color(255, 255, 255));
        btnCheck.setText("Confirm to Check-out");
        btnCheck.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCheck.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnCheckFocusGained(evt);
            }
        });
        btnCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCheckMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCheckMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCheckMouseExited(evt);
            }
        });
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 270, 37, 0);
        add(btnCheck, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        lblSearch.setForeground(Color.white);
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        lblSearch.setForeground(new Color(153,153,153));
    }//GEN-LAST:event_txtSearchFocusLost

    private void cartListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cartListKeyReleased
         
         
//               for(int o=0; o<makeIndex; o++)
//             {
//                 System.out.println(searchedItemName[o]);
//             }
//            
    }//GEN-LAST:event_cartListKeyReleased

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
         ItemFiltered=0;  
        filteredItemIndex=0;
        makeIndex=0;
       
       
        Items.removeAllElements();
        for(int p=0; p<noOfItems; p++)
               {
                   if(searchItem[p].toLowerCase().contains(txtSearch.getText().toLowerCase()))
                   {
                       System.out.println(searchItem[p].toLowerCase());
                       ItemFiltered++;
                   }
               }
               filteredIndexes= new int[ItemFiltered];
               for(int p=0; p<noOfItems; p++)
               {
                   if(searchItem[p].toLowerCase().contains(txtSearch.getText().toLowerCase()))
                   {
                       filteredIndexes[filteredItemIndex]=p;
                       
                        searchAddItem(p);
                       filteredItemIndex++;
                   }
               }
               //searchAddItem(filteredItemIndex,filteredIndexes,ItemName,ItemPrice,ItemQuantity);
                cartList.setModel(Items);
        cartList.setCellRenderer(new CartItemPanel());
    }//GEN-LAST:event_txtSearchKeyReleased

    private void cartListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartListMouseClicked
       int delete=JOptionPane.showConfirmDialog(null, "Are you Sure you want to delete ?");
        
       if(delete==0)
       {
           int index=cartList.getSelectedIndex();
           
        Connection con;
        Statement st;
        ResultSet rs;
        try
        {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con=DriverManager.getConnection("jdbc:oracle:thin:@"+IP+":1521:xe","system","bukhari");
              String sql1="Delete Cart where CMS_ID='"+this.myID+"' and Item_ID="+searchedItemID[index]+" and Shop_ID='"+searchedShopID[index]+"'";
            st=con.createStatement();   
             rs=st.executeQuery(sql1);   
           
            con.close();
        }
        catch(Exception e)
        {
            System.out.println("Delete Problem");
            System.out.println(e.getMessage());
        }
           System.out.println("Deleted Item : "+searchedItemID[index]);
        Items.removeElementAt(index);
           
        for(int l=index; l<noOfItems-1; l++)
        {
            searchedItemID[l]=searchedItemID[l+1];
            searchedItemName[l]=searchedItemName[l+1];
            searchedItemQuantity[l]=searchedItemQuantity[l+1];
            searchedItemPrice[l]=searchedItemPrice[l+1];
            searchedShopID[l]=searchedShopID[l+1];
        }
        
        
        
        lblCartNo.setText(Integer.toString((Integer.parseInt(lblCartNo.getText())-1)));
        noOfItems -=1;
        
        
       
        //cart.CartItem(myID,searchedShopID,searchedItemID,searchedItemQuantity,searchedItemPrice,noOfItems);
       }
       else
       {
        
          //cart.CartItem(myID,searchedShopID,searchedItemID,searchedItemQuantity,searchedItemPrice,noOfItems);
       }
       
    }//GEN-LAST:event_cartListMouseClicked

    private void btnCheckFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnCheckFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCheckFocusGained

    private void btnCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCheckMouseClicked
      

    }//GEN-LAST:event_btnCheckMouseClicked

    private void btnCheckMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCheckMouseEntered
        btnCheck.setBackground(new Color(225,150,100));
        btnCheck.setForeground(Color.black);

    }//GEN-LAST:event_btnCheckMouseEntered

    private void btnCheckMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCheckMouseExited
        btnCheck.setBackground(new Color(70,80,95));
        btnCheck.setForeground(Color.white);
    }//GEN-LAST:event_btnCheckMouseExited

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        Connection con;
        Statement st;
        ResultSet rs;
        System.out.println("Check Out");
            try
            {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con=DriverManager.getConnection("jdbc:oracle:thin:@"+IP+":1521:xe","system","bukhari");
            if(isBalenceSufficient(lblBalance))
            {
              for(int i=0; i<noOfItems; i++)  
              {
                  
                  
            String sql="insert into purchases values('"+this.myID+"','"+this.searchedShopID[i]+"',"+this.searchedItemID[i]+","+Integer.parseInt(this.searchedItemQuantity[i])+",sysdate)";
             st=con.createStatement();
            rs=st.executeQuery(sql);
                  System.out.println("After 1st Query");
             int current=(Integer.parseInt(searchedItemQuantity[i]))*(Integer.parseInt(searchedItemPrice[i]));
            String sq3="Update Seller set Balance=(Select Balance from Seller Where Shop_ID='"+searchedShopID[i]+"')+"+current+" where Shop_ID='"+searchedShopID[i]+"'";
              
             st=con.createStatement();
            rs=st.executeQuery(sq3);
            
                 
              }
            
            String sql1="Delete Cart where CMS_ID='"+this.myID+"'";
            st=con.createStatement();   
             rs=st.executeQuery(sql1);   
               System.out.println("After 2st Query");
             
            String sq2="Update Customer set Balance="+Integer.parseInt(lblBalance.getText())+" where CMS_ID='"+myID+"'";
               
             st=con.createStatement();
            rs=st.executeQuery(sq2);
              System.out.println("After 3th Query");
            for(int i=0; i<noOfItems; i++)
            {
                
            String sq3="Update Item set Quantity=(Select Quantity from Item Where Item_ID="+searchedItemID[i]+" and Shop_ID='"+searchedShopID[i]+"')-"+Integer.parseInt(searchedItemQuantity[i])+" where Item_ID="+searchedItemID[i]+" and Shop_ID='"+searchedShopID[i]+"'";
              
             st=con.createStatement();
            rs=st.executeQuery(sq3);
              System.out.println("After 4 Query");
            }   
              
          Items.removeAllElements();
          lblCartNo.setText(Integer.toString(0));
              
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Sorry ! Insufficient Balance to Proceed");
            }
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }

        
    }//GEN-LAST:event_btnCheckActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheck;
    private javax.swing.JList<CartItemObject> cartList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
     DefaultListModel<CartItemObject> Items= new DefaultListModel<CartItemObject>();   
    String[] Shop_ID;
      String[] searchItem;
      String[] ItemName;
      String[] ItemQuantity;
      String[] ItemPrice;
      String[] ItemTotalPrice;
      int filteredIndexes[];
      int ItemIndex=0;
      int noOfItems=0;
      int ItemFiltered=0;
       int filteredItemIndex=0;
       int[] ItemID;
       int makeIndex=0;
       String myID;
       
        String[] searchedItemName;
      String[] searchedItemQuantity;
      String[] searchedItemPrice;
      String[] searchedItemTotalPrice;
       int[] searchedItemID;
         String[] searchedShopID;
     
         int noOfItemsInCart=0;
     
     
     
     private void AddItems(ResultSet rs) {
        ItemIndex=0;
       searchItem=new String[noOfItems];
        ItemName= new String[noOfItems];
        ItemPrice= new String[noOfItems];
        ItemQuantity= new String[noOfItems];
        ItemID= new int[noOfItems];
        ItemTotalPrice= new String[noOfItems];
        Shop_ID=new String[noOfItems];
        searchedItemName= new String[noOfItems];
        searchedItemPrice= new String[noOfItems];
        searchedItemQuantity= new String[noOfItems];
        searchedItemID= new int[noOfItems];
        searchedShopID= new String[noOfItems];
        searchedItemTotalPrice= new String[noOfItems];
        
        
        
        
        try
        {
           while(rs.next())
           {
              
        Items.addElement(new CartItemObject(rs.getString("Item_Name"),rs.getInt("Quantity"),rs.getInt("Price")));
        searchItem[ItemIndex]=rs.getString("Item_Name")+" "+Integer.toString(rs.getInt("Quantity"))+" "+Integer.toString(rs.getInt("Price"));
        ItemName[ItemIndex]=rs.getString("Item_Name");
        ItemQuantity[ItemIndex]=Integer.toString(rs.getInt("Quantity"));
        ItemPrice[ItemIndex]=Integer.toString(rs.getInt("Price"));
        ItemID[ItemIndex]=rs.getInt("Item_ID");
        Shop_ID[ItemIndex]=rs.getString("Shop_ID");
        
        
        
        ItemIndex++;
       
           }
            cartList.setModel(Items);
        cartList.setCellRenderer(new CartItemPanel());
        }
        catch(Exception e)
        {
            
        }
       
       for(int j=0; j<noOfItems; j++)
        {
        searchedItemName[j]=ItemName[j];
        searchedItemQuantity[j]=ItemQuantity[j];
        searchedItemPrice[j]=ItemPrice[j];
        searchedItemID[j]=ItemID[j];
        searchedShopID[j]=Shop_ID[j];
        }
    }
    public void searchAddItem(int index)//int noOfFilteredItem, int[] filteredIndexes, String[] ItemName, String[] ItemPrice, String[] ItemQuantity)
    {
        
        
        
        
        //System.out.println(ItemName[index]+ItemPrice[index]);
        searchedItemName[makeIndex]=ItemName[index];
        searchedItemQuantity[makeIndex]=ItemQuantity[index];
        searchedItemPrice[makeIndex]=ItemPrice[index];
        searchedItemID[makeIndex]=ItemID[index];
         searchedShopID[makeIndex]=Shop_ID[index];
        Items.addElement(new CartItemObject(ItemName[index],Integer.parseInt(ItemQuantity[index]),Integer.parseInt(ItemPrice[index])));
        makeIndex++;
    }
    
     public boolean isBalenceSufficient(JLabel lblBalance)
    {
         int balance=0;
             for(int h=0; h<noOfItems; h++)
             {
                 
            
                System.out.println("Balance Item Price : "+searchedItemPrice[h]);
                 System.out.println("Balance Item ID : "+searchedItemID[h]);
            
                 balance=balance+Integer.parseInt(this.searchedItemPrice[h])*Integer.parseInt(this.searchedItemQuantity[h]);
             }
             
         System.out.println("This is Your Total Transaction Balance"+balance);
         if(balance>Integer.parseInt(lblBalance.getText()))
         {
             return false;
         }
         else
         {
             lblBalance.setText(Integer.toString(Integer.parseInt(lblBalance.getText())-balance));
             
             return true;
         }
    }
     public int checkCart()
{
    Connection con;
        Statement st;
        ResultSet rs;
         try
            {
                 Class.forName("oracle.jdbc.driver.OracleDriver");
            con=DriverManager.getConnection("jdbc:oracle:thin:@"+IP+":1521:xe","system","bukhari");
            
            String sq2="Select Count(Item_ID) as \"Number\" from CartView where CMS_ID='"+myID+"'";
               
             st=con.createStatement();
            rs=st.executeQuery(sq2);
               
            rs.next();
            noOfItemsInCart=rs.getInt("Number");
            }
         catch(Exception e)
         {
             
         }
         return noOfItemsInCart;
}

}
