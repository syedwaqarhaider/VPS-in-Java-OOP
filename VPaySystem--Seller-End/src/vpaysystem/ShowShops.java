/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vpaysystem;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author SWHB
 */
public class ShowShops extends javax.swing.JPanel{

    /**
     * Creates new form ShowShops
     */
    JLabel lblCartNo = new JLabel();
    String IP;
    public ShowShops(String myID, JLabel lblCartNo, String IP) {
        initComponents();
        this.IP=IP;
        comboShops.removeAllItems();
        ItemList.setSelectionForeground(Color.yellow);
        this.myID=myID;
        this.lblCartNo=lblCartNo;
        AddShops();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblCMS = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        comboShops = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ItemList = new javax.swing.JList<>();

        setBackground(new java.awt.Color(52, 52, 60));
        setLayout(new java.awt.GridBagLayout());

        lblCMS.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCMS.setForeground(new java.awt.Color(153, 153, 153));
        lblCMS.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 230, 0, 0);
        add(lblCMS, gridBagConstraints);

        txtSearch.setBackground(new java.awt.Color(52, 52, 60));
        txtSearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtSearch.setForeground(new java.awt.Color(255, 255, 255));
        txtSearch.setBorder(null);
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.ipadx = 279;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 230, 0, 0);
        add(txtSearch, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.ipadx = 278;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 230, 0, 0);
        add(jSeparator1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Available Shops");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 250, 0, 0);
        add(jLabel1, gridBagConstraints);

        comboShops.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboShops.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboShopsItemStateChanged(evt);
            }
        });
        comboShops.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboShopsMouseClicked(evt);
            }
        });
        comboShops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboShopsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 94;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(33, 0, 0, 0);
        add(comboShops, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Select Shop");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 28;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(33, 220, 0, 0);
        add(jLabel2, gridBagConstraints);

        ItemList.setBackground(new java.awt.Color(52, 52, 60));
        ItemList.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        ItemList.setForeground(new java.awt.Color(255, 255, 255));
        ItemList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ItemList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemListMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ItemListMouseEntered(evt);
            }
        });
        jScrollPane2.setViewportView(ItemList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 577;
        gridBagConstraints.ipady = 307;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 90, 87, 99);
        add(jScrollPane2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        lblCMS.setForeground(Color.white);
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        lblCMS.setForeground(new Color(153,153,153));
    }//GEN-LAST:event_txtSearchFocusLost

    private void ItemListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemListMouseClicked
       int Quantity=0;
       try
       {
        Quantity=Integer.parseInt(JOptionPane.showInputDialog(null,"Enter The Quantity"));
       }
       catch(Exception e)
       {
           
       }
       if(Quantity>0)
       {
       if(Quantity<=Integer.parseInt(searchedItemQuantity[ItemList.getSelectedIndex()]))
       {
        System.out.println(Quantity);
        int value=0;
        int noOfCart=0;
        Connection con;
        Statement st;
        ResultSet rs;
        
            try
            {
                 Class.forName("oracle.jdbc.driver.OracleDriver");
            con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","bukhari");
            //"Select Count(Item_ID) as \"Number\" from Item where Shop_ID='"+Shop_ID[comboShops.getSelectedIndex()-1]+"'";
           String sq2="Select * from Cart where Shop_ID='"+Shop_ID[comboShops.getSelectedIndex()-1]+"' and Item_ID='"+searchedItemID[ItemList.getSelectedIndex()]+"' and CMS_ID='"+myID+"'";
                  
             st=con.createStatement();
            rs=st.executeQuery(sq2);
                
            while(rs.next())
            {
                
                value++;
                
            }
             
            if(value>0)
            {
                
             String sq="Update Cart set Quantity=(select Quantity from Cart where Shop_ID='"+Shop_ID[comboShops.getSelectedIndex()-1]+"' and Item_ID='"+searchedItemID[ItemList.getSelectedIndex()]+"' and CMS_ID='"+myID+"')+"+Quantity
                      + " where Shop_ID='"+Shop_ID[comboShops.getSelectedIndex()-1]+"' and Item_ID='"+searchedItemID[ItemList.getSelectedIndex()]+"' and CMS_ID='"+myID+"'";
               
               st=con.createStatement();
            rs=st.executeQuery(sq);
             
            }
            else
            {
               
             String sq;      
                     sq = "insert into Cart values('"+myID+"','"+Shop_ID[comboShops.getSelectedIndex()-1]+"',"+searchedItemID[ItemList.getSelectedIndex()]+","+Quantity+","+Integer.parseInt(searchedItemPrice[ItemList.getSelectedIndex()])+")";
                st=con.createStatement();
            rs=st.executeQuery(sq);
             
            }
           String sq;      
                     sq = "select * from Cart where CMS_ID='"+myID+"'";
                st=con.createStatement();
            rs=st.executeQuery(sq);
             while(rs.next())
             {
                noOfCart++;     
             }

            con.close();
            
            
            lblCartNo.setText(Integer.toString(noOfCart));
            
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }
       }
       else
       {
           JOptionPane.showMessageDialog(null, "Insufficient Stock");
       }
       }
       // System.out.println(ItemList.getSelectedIndex());
        //Items.remove(ItemList.getSelectedIndex());
    }//GEN-LAST:event_ItemListMouseClicked

    private void ItemListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemListMouseEntered
       
    }//GEN-LAST:event_ItemListMouseEntered

    private void comboShopsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboShopsMouseClicked
      
    }//GEN-LAST:event_comboShopsMouseClicked

    private void comboShopsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboShopsItemStateChanged
        
        //ItemList.repaint();
        
              
    }//GEN-LAST:event_comboShopsItemStateChanged

    private void comboShopsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboShopsActionPerformed
      
       Items.removeAllElements();
       if(comboShops.getSelectedIndex()>0)
       {
        Connection con;
        Statement st;
        ResultSet rs;
        
            try
            {
                 Class.forName("oracle.jdbc.driver.OracleDriver");
            con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","bukhari");
            
            String sq2="Select Count(Item_ID) as \"Number\" from Item where Shop_ID='"+Shop_ID[comboShops.getSelectedIndex()-1]+"'";
               
             st=con.createStatement();
            rs=st.executeQuery(sq2);
            rs.next();
            noOfItems=rs.getInt("Number");
          
            String sql="Select * from Item where Shop_ID='"+Shop_ID[comboShops.getSelectedIndex()-1]+"'";
          //      System.out.println(sql);
             st=con.createStatement();
            rs=st.executeQuery(sql);
          
            AddItem(rs);
            
            con.close();
            
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }
            
       }    
    }//GEN-LAST:event_comboShopsActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        ItemFiltered=0;  
        filteredItemIndex=0;
        makeIndex=0;
        Items.removeAllElements();
        for(int p=0; p<noOfItems; p++)
               {
                   if(searchItem[p].toLowerCase().contains(txtSearch.getText().toString().toLowerCase()))
                   {
                       ItemFiltered++;
                   }
               }
               filteredIndexes= new int[ItemFiltered];
               for(int p=0; p<noOfItems; p++)
               {
                   if(searchItem[p].toLowerCase().contains(txtSearch.getText().toLowerCase()))
                   {
                       filteredIndexes[filteredItemIndex]=p;
                       
                        searchAddItem(p);
                       filteredItemIndex++;
                   }
               }
               //searchAddItem(filteredItemIndex,filteredIndexes,ItemName,ItemPrice,ItemQuantity);
                ItemList.setModel(Items);
        ItemList.setCellRenderer(new ItemPanel());
         
//               for(int o=0; o<makeIndex; o++)
//             {
//                 System.out.println(searchedItemName[o]);
//             }
//               
    }//GEN-LAST:event_txtSearchKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<ItemObject> ItemList;
    private javax.swing.JComboBox<String> comboShops;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCMS;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
        DefaultListModel<ItemObject> Items= new DefaultListModel<ItemObject>();
      String[] Shop_ID;
      String[] searchItem;
      String[] ItemName;
      String[] ItemQuantity;
      String[] ItemPrice;
      int filteredIndexes[];
      int ItemIndex=0;
      int noOfItems=0;
      int ItemFiltered=0;
       int filteredItemIndex=0;
       int[] ItemID;
       int makeIndex=0;
       String myID;
       
        String[] searchedItemName;
      String[] searchedItemQuantity;
      String[] searchedItemPrice;
       int[] searchedItemID;
  
    private void AddShops() {
        
      comboShops.addItem("--Select Shop--");
        int noOfShops=0;
        int i=0;
        Connection con;
        Statement st;
        ResultSet rs;
        
            try
            {
                 Class.forName("oracle.jdbc.driver.OracleDriver");
            con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","bukhari");
            
            String sql="Select Shop_ID,Shop_Name from Seller where Available=1";
             st=con.createStatement();
            rs=st.executeQuery(sql);
            
            while(rs.next())
            {
             comboShops.addItem(rs.getString("Shop_Name"));
             noOfShops++;
            }
            Shop_ID= new String[noOfShops];
            String sql1="Select Shop_ID,Shop_Name from Seller where Available=1";
             st=con.createStatement();
            rs=st.executeQuery(sql1);
            while(rs.next())
            {
                Shop_ID[i]=rs.getString("Shop_ID");
                i++;
            }
            con.close();
            
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }
            
        
    }
    public void AddItem(ResultSet rs)
    {
        ItemIndex=0;
       searchItem=new String[noOfItems];
        ItemName= new String[noOfItems];
        ItemPrice= new String[noOfItems];
        ItemQuantity= new String[noOfItems];
        ItemID= new int[noOfItems];
        
        searchedItemName= new String[noOfItems];
        searchedItemPrice= new String[noOfItems];
        searchedItemQuantity= new String[noOfItems];
        searchedItemID= new int[noOfItems];
        
        try
        {
            
        while(rs.next())
        {
        Items.addElement(new ItemObject(rs.getString("Item_Name"),rs.getInt("Quantity"),rs.getInt("Price")));
        searchItem[ItemIndex]=rs.getString("Item_Name")+" "+Integer.toString(rs.getInt("Quantity"))+" "+Integer.toString(rs.getInt("Price"));
        ItemName[ItemIndex]=rs.getString("Item_Name");
        ItemQuantity[ItemIndex]=Integer.toString(rs.getInt("Quantity"));
        ItemPrice[ItemIndex]=Integer.toString(rs.getInt("Price"));
        ItemID[ItemIndex]=rs.getInt("Item_ID");
        
        
        
        ItemIndex++;
       
        }
        
        ItemList.setModel(Items);
        ItemList.setCellRenderer(new ItemPanel());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
        for(int j=0; j<noOfItems; j++)
        {
        searchedItemName[j]=ItemName[j];
        searchedItemQuantity[j]=ItemQuantity[j];
        searchedItemPrice[j]=ItemPrice[j];
        searchedItemID[j]=ItemID[j];
        }
    }
    public void searchAddItem(int index)//int noOfFilteredItem, int[] filteredIndexes, String[] ItemName, String[] ItemPrice, String[] ItemQuantity)
    {
        
        
        
        
        //System.out.println(ItemName[index]+ItemPrice[index]);
        searchedItemName[makeIndex]=ItemName[index];
        searchedItemQuantity[makeIndex]=ItemQuantity[index];
        searchedItemPrice[makeIndex]=ItemPrice[index];
        searchedItemID[makeIndex]=ItemID[index];
        Items.addElement(new ItemObject(ItemName[index],Integer.parseInt(ItemQuantity[index]),Integer.parseInt(ItemPrice[index])));
        makeIndex++;
//        int searchIndex=0;
//      
//         for(int i=0; i<noOfFilteredItem; i++)
//         {
//             searchIndex=0;
//             while(searchIndex<noOfFilteredItem)
//             {
//                 if(filteredIndexes[i]==searchIndex)
//                 {
//                     System.out.println("This you Search"+searchIndex);
//                     System.out.println(ItemName[searchIndex]);
//                 }
//                 searchIndex++;
//             }
//         }
        
       
    }

   
}
